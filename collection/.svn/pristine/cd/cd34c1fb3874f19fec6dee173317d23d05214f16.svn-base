<template>
  <div class="content-body">
    <!-- 顶部，包括标题，操作按钮-->
    <div class="bd-top">
      <div class="md clearfix">
        <!-- 1、左边标题 -->
        <div class="md-left">
          <h5>催收员外访情况查询</h5>
        </div>
        <!-- 2、右边操作按钮 -->
        <div class="md-right">
        </div>
      </div>
    </div>
    <div class="bd-main">
      <el-form ref="conditionForm" :model="conditionForm" :label-width="this.$util.LABEL_WIDTH" label-position="right" class="condition-form"
        size="mini" >
        <div class="el-col fixed-width">
          <!-- <el-form-item label="贷款机构" prop="loanInstitution">
            <el-select placeholder="" v-model="conditionForm.loanInstitution" clearable>
              <el-option v-for="option in departments.loanInstitution" :label="option.name" :value="option.code" :key="option.id"></el-option>
            </el-select>
          </el-form-item> -->
           <el-form-item label="催收部门" prop="departmentId">
              <el-cascader :options="departments" change-on-select v-model="departmentIds" :props="departmentProps" @change="getDepartmentId" >
              </el-cascader>
            </el-form-item>
        </div>
        <div class="el-col fixed-width">
          <el-form-item label="催收员" prop="userId">
              <el-select placeholder="请选择催收员" v-model="conditionForm.userId" clearable>
                <el-option v-for="option in workers" :label="option.name" :value="option.id" :key="option.id"></el-option>
              </el-select>
            </el-form-item>
        </div>
        <div class="el-col fixed-width">
          <el-form-item label="外访时间" prop="visitTime">
            <el-date-picker clearable v-model="conditionForm.visitTime" type="daterange" format="yyyy/MM/dd" range-separator="-" start-placeholder="开始日期"
              end-placeholder="结束日期" value-format="yyyy-MM-dd" @change="getvisitTime">
            </el-date-picker>
          </el-form-item>
        </div>
        <div class="el-col fixed-width form-btns">
          <el-button size="mini" type="primary" @click="search">搜索</el-button>
          <el-button size="mini" @click="reset">重置</el-button>
        </div>
      </el-form>
      <!-- <el-table ref="multipleTable" height="460" element-loading-text="拼命加载中" element-loading-spinner="el-icon-loading" :data="tb.data"
        tooltip-effect="dark" empty-text="暂无数据" v-loading="loading">
        <el-table-column v-for="field in tb.fields" :align="field.align||'left'" :prop="field.key" :label="field.label" :width="field.width"
          :key="field.id">
        </el-table-column>
      </el-table> -->
      <my-table :tb="tb"  :loading="loading" @sortChange="sortChange" @detailDialog="detailDialog"></my-table>
      <el-pagination small @current-change="handleCurrentChange" :current-page.sync="conditionForm.currentPage" :page-size="conditionForm.pageSize"
        layout="sizes,total, prev, pager, next,jumper"  @size-change="changeSize"  :page-sizes="[15, 50, 100]" :total="total" >
      </el-pagination>
        <!-- 详情 -->
    <el-dialog :title="operationBtns[0].dialog.title" :visible.sync="operationBtns[0].dialog.dialogFormVisible" :close-on-click-modal="false">
      <div class="dialog-main">
          <!-- <my-table :tb="tb2"  :loading="loading2" @sortChange="sortChange2"></my-table> -->
      
      </div>
      
    </el-dialog>
    </div>
    
  </div>

</template>


<script>
  import myTable from '../../public-components/my-table'
  const fields = [
    {
      key: "caseCode",
      label: "日期",
      width: "110",
      type: "0",
      sortable: 'custom'
    },
    {
      key: "caseCode",
      label: "催收员（催收员ID）",
      width: "",
      type: "0",
    },
    {
      key: "caseCode",
      label: "催收部门",
      width: "",
      type: "0",
    },
    {
      key: "caseCode",
      label: "外访任务总数量",
      width: "",
      type: "0",
      sortable: 'custom'
      
    },{
      key: "caseCode",
      label: "已完成外访任务数量",
      width: "",
      type: "0",
      sortable: 'custom'
    },{
      key: "caseCode",
      label: "已回访外访任务数量",
      width: "",
      type: "0",
      sortable: 'custom'
    },
  
  ]
  import qs from 'qs'
  import {
    mapGetters,
    mapMutations
  } from 'vuex'
  export default {
    components: {
      myTable
    },
    data() {
    //   var validateRepayMoneyMin = (rule, value, callback) => {
    //       if (value) {
    //         let pattern = /^[1-9][0-9]{0,9}([.][0-9]{0,2})?$/;
    //         if (!pattern.test(value)) {
    //           callback(new Error("最多10位整数和2位小数"));
    //         } else if (this.conditionForm.repayMoneyMax && (this.conditionForm.repayMoneyMax - 0 < this.conditionForm.repayMoneyMin -
    //             0)) {
    //           callback(new Error('最小值不能大于最大值'))
    //         } else {
    //           this.$refs['repayMoneyMax'].clearValidate()
    //           callback();
    //         }
    //       } else {
    //         callback();
    //       }
    //     },
    //     validateRepayMoneyMax = (rule, value, callback) => {
    //       if (value) {
    //         let pattern = /^[1-9][0-9]{0,9}([.][0-9]{0,2})?$/;
    //         if (!pattern.test(value)) {
    //           callback(new Error("最多10位整数和2位小数"));
    //         } else if (this.conditionForm.repayMoneyMin && (this.conditionForm.repayMoneyMax - 0 < this.conditionForm.repayMoneyMin -
    //             0)) {
    //           callback(new Error('最小值不能大于最大值'))
    //         } else {
    //           this.$refs['repayMoneyMin'].clearValidate()
    //           callback();
    //         }
    //       } else {
    //         callback();
    //       }
    //     },
    //     validateReduceMoneyMin = (rule, value, callback) => {
    //       if (value) {
    //         let pattern = /^[1-9][0-9]{0,9}([.][0-9]{0,2})?$/;
    //         if (!pattern.test(value)) {
    //           callback(new Error("最多10位整数和2位小数"));
    //         } else if (this.conditionForm.reduceMoneyMax && (this.conditionForm.reduceMoneyMax - 0 < this.conditionForm
    //             .reduceMoneyMin - 0)) {
    //           callback(new Error('最小值不能大于最大值'))
    //         } else {
    //           this.$refs['reduceMoneyMax'].clearValidate()
    //           callback();
    //         }
    //       } else {
    //         callback();
    //       }
    //     },
    //     validateReduceMoneyMax = (rule, value, callback) => {
    //       if (value) {
    //         let pattern = /^[1-9][0-9]{0,9}([.][0-9]{0,2})?$/;
    //         if (!pattern.test(value)) {
    //           callback(new Error("最多10位整数和2位小数"));
    //         } else if (this.conditionForm.reduceMoneyMin && (this.conditionForm.reduceMoneyMax - 0 < this.conditionForm
    //             .reduceMoneyMin - 0)) {
    //           callback(new Error('最小值不能大于最大值'));
    //         } else {
    //           this.$refs['reduceMoneyMin'].clearValidate();
    //           callback();
    //         }
    //       } else {
    //         callback();
    //       }
    //     }
      return {
        departments: [],
        departmentIds: [],
        workers: [],
        departmentProps: {
          label: "name",
          value: "id"
        },
        
        
        conditionForm: {
          departmentId: "",
          userId:"",
          visitTimeMax:"",
          visitTimeMin:"",
          currentPage: 1,
          pageSize: 15,
        },
        searchForm: {},
        hasSearch: false,
        loading: true,
        total: 0,
        operationBtns:[{
          name: '详情',
          identifier: '',
          dialog: {
            dialogFormVisible: false,
            form: {
            },
            rule: {},
            formName: '',
            url: '/api/assignee/visit/statisticDetail',
            title: '详情',
          },
          isShow: true,
        }],
        tb: {
          fields: fields,
          data: [],
          selectionBtn: false,
          height: 460,
          OperationBtn:[{
              type: 'button',
              size: 'mini',
              key: '2',
              name: '详情',
              isShow: true
            },
          ]
        },
        rules: {
        //   batchCode: [
        //     this.$util.formRule.batchCode,
        //   ],
        //   caseCode: [
        //     this.$util.formRule.caseCode,
        //   ],
        //   repayMoneyMin: [{
        //     validator: validateRepayMoneyMin,
        //     trigger: "blur",
        //     type: 'number',
        //   }],
        //   repayMoneyMax: [{
        //     validator: validateRepayMoneyMax,
        //     trigger: "blur",
        //     type: 'number',
        //   }],
        //   reduceMoneyMin: [{
        //     validator: validateReduceMoneyMin,
        //     trigger: "blur",
        //     type: 'number',
        //   }],
        //   reduceMoneyMax: [{
        //     validator: validateReduceMoneyMax,
        //     trigger: "blur",
        //     type: 'number',
        //   }],
        },
      }

    },
    created() {
      // 获取该页的identifier
      let param = {
        identifier: this.$route.path.slice(1)
      }
      // this.$util.getPageResourceByMenu(param,this)
      //   this.getApartment(function(_this){
      //     _this.getList(_this.queryParams)
      //   })
      // 获取参数
      //  let search = window.location.href.split('id=')[1];
      //  if(!search) {
      //    this.conditionForm.billCode = ''
      //  } else {
      //    let billCode = this.$util.decrypt(search,'repay');
      //    this.conditionForm.billCode = billCode;
      //  }
      //
        //   let caseId = this.$route.query.caseId;
        //   let caseIdEncode = '';
        //   if (caseId) {
        //     caseIdDecode = this.$util.decrypt(caseId, 'repay');
        //     this.conditionForm.caseId = caseIdDecode;
        //   }
      // console.log(this.conditionForm.caseId)
      this.searchForm = Object.assign({}, this.conditionForm);
      this.getList(this.conditionForm);
      this.getApartment();
    },
    computed: {
    },
    methods: {

      // 获取还款时间 
      getvisitTime(val) {
        if (!val) {
          this.conditionForm.visitTimeMin = '';
          this.conditionForm.visitTimeMax = '';
        } else {
          this.conditionForm.visitTimeMin = val[0];
          this.conditionForm.visitTimeMax = val[1];
        }
      },

      // 搜索
      search() {
        this.$refs.conditionForm.validate((valid) => {
          if (valid) {
            this.searchForm = Object.assign({}, this.conditionForm);
            if (this.conditionForm.currentPage == 1) {
              this.getList(this.conditionForm);
            } else {
              this.conditionForm.currentPage = 1;
              this.hasSearch = true;
            }
          }
        })
      },

      // 重置搜索信息
      reset() {
        this.$refs.conditionForm.resetFields();
        this.conditionForm.visitTimeMin = '';
        this.conditionForm.visitTimeMax = '';
        this.searchForm = Object.assign({}, this.conditionForm)
        if (this.conditionForm.currentPage == 1) {
          this.getList(this.conditionForm);
        } else {
          this.conditionForm.currentPage = 1;
          this.hasSearch = true;
        }
      },

      // 获取列表
      getList(data) {
        var queryParams;
        if (data) {
          queryParams = data
        } else {
          queryParams = this.conditionForm
        }
        this.loading = true;
        this.$axios.post('/api/assignee/visit/statistic', queryParams).then((res) => {
          if (res.data.code == 0) {
            this.tb.data = res.data.data.items;
            this.total = res.data.data.totalNum;
            this.loading = false;
          } else {
            this.$util.failCallback(res.data, this);
            this.loading = false;
          }
        }).catch((err) => {
          console.log(err);
          this.loading = false;
        })
      },
      // 改变页数
      changeSize(index) {
        this.conditionForm.pageSize = index;
        this.searchForm.pageSize = index;
        if(this.conditionForm.currentPage == 1) {
          this.getList(this.conditionForm)
        } else {
          this.conditionForm.currentPage = 1;
        }
      },
      // 获取下拉初始数据
      getApartment() {
        this.$axios.post('/api/assignee/visit/getDepartmentsConditionByBatch',{}).then((res) => {
          if (res.data.code == 0) {
            this.departments = res.data.data;
          } else {
            this.$util.failCallback(res.data, this)
          }
        }).catch((err) => {
          console.log(err)
        })
      },
       // 选择部门
      getDepartmentId(arr) {
        this.conditionForm.departmentId = this.departmentIds[this.departmentIds.length - 1];
        this.conditionForm.userId=""
        this.$axios
          .post("/api/assignee/visit/getStaffsByBatch", {
            departmentId: this.conditionForm.departmentId
          })
          .then(res => {
            if (res.data.code == 0) {
              this.workers = res.data.data;
            } else {
              this.$util.failCallback(res.data, this);
            }
          })
          .catch(err => {
            console.log(err);
          });
      },

      // 跳转分页
      handleCurrentChange(index) {
        this.searchForm.currentPage = index;
        if (this.hasSearch) {
          this.getList(this.conditionForm);
          this.hasSearch = false;
        } else {
          this.conditionForm = Object.assign({}, this.searchForm);
          this.getList(this.searchForm);
        }
      },
      // 详情
     detailDialog(scope,btn){
         btn=this.operationBtns[0]
        //  this.operationBtns[0].dialog.dialogFormVisible=true
        this.$axios.post(btn.dialog.url, {
          date: scope.row.date
        }).then((res) => {
          if (res.data.code == 0) {
            btn.dialog.form = res.data.data
            btn.dialog.dialogFormVisible = true
          } else {
            util.failCallback(res.data, this)
          }
        }).catch((err) => {
          console.log(err)
        })

      },
      // 表格排序
      sortChange(item) {
        this.conditionForm.sortField = item.prop;
        this.conditionForm.sequence = item.order === 'ascending'?'ASC':'DESC';
        this.conditionForm.currentPage == 1;
        this.getList(this.conditionForm);
      }
    },

   


  }

</script>

<style lang="scss">


</style>
