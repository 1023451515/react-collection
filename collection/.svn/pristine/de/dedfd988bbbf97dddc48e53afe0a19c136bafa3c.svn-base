<template>
  <div class="content-body">
    <!-- 顶部，包括标题，操作按钮-->
    <div class="bd-top">
      <div class="md clearfix">
        <!-- 1、左边标题 -->
        <div class="md-left">
          <h5>个人绩效查看</h5>
        </div>
        <!-- 2、右边操作按钮 -->
        <div class="md-right">
        </div>
      </div>
    </div>
    <div class="bd-main">
      <el-form size="mini" inline>
        <el-form-item label="部门" prop="departmentId">
          <el-cascader :options="departments" change-on-select v-model="departmentIds" :props="departmentProps" @change="getStaffData" >
          </el-cascader>
        </el-form-item>
        <el-form-item label="催收员" prop="staffId">
          <el-select v-model="staffObj" placeholder="请选择" filterable @change="staffIdChange" value-key="id">
            <el-option :label="item.name" :value="item" v-for="item in staffs" :key="item.id"></el-option>
          </el-select>
        </el-form-item>
      </el-form>

      <el-tabs v-model="currentChart" @tab-click="chartChange">
        <el-tab-pane v-for="item in tabsData" :label="item.label" :name="item.name" :key="item.id"></el-tab-pane>
      </el-tabs>
      <!-- 个人绩效 -->
      <div ref="personKPIChart" style="height:380px;"></div>
      <el-table ref="multipleTable" :data="tb.data" tooltip-effect="dark" v-loading="loading" element-loading-text="拼命加载中" element-loading-spinner="el-icon-loading"
        empty-text="暂无数据">
        <el-table-column type="index" width="120" label="本月绩效排名">
        </el-table-column>
        <el-table-column v-for="field in tb.fields" align="left" :prop="field.key" :label="field.label" :width="field.width" :key="field.id">
        </el-table-column>
      </el-table>
      <!-- <pagination :total="total" @changePage="changePage" :pageSize="pageSize" :currentPage="currentPage"></pagination> -->
    </div>
  </div>
</template>

<script>
  const fields = [{
      key: 'staffName',
      label: '催收员',
      width: '200',
      id: '2'
    },
    {
      key: 'orgName',
      label: '所属部门',
      width: '',
      id: '3'
    },
    {
      key: 'repayMoney',
      label: '回收金额',
      width: '150',
      id: '4'
    },
    {
      key: 'commitMoney',
      label: '委托金额',
      width: '150',
      id: '5'
    },
    {
      key: 'onCaseRecovery',
      label: '在案回收率',
      width: '150',
      id: '6'
    },
    {
      key: 'newCaseRecovery',
      label: '新案回收率',
      width: '150',
      id: '7'
    },
    {
      key: 'oldCaseRecovery',
      label: '旧案回收率',
      width: 'auto',
      id: '9'
    },
    {
      key: 'repayCaseCount',
      label: '还款案件数',
      width: '150',
      id: '10'
    },
    {
      key: 'commitCaseCount',
      label: '分配案件数',
      width: 'auto',
      id: '11'
    },

  ]
  import pagination from '../../public-components/pagination'
  import echarts from 'echarts'
  export default {
    data() {
      return {
        currentChart: '/api/assignee/performance/staffOne/getRepayMoneyData',
        tb: {
          data: [],
          fields: fields,
        },
        departments: [],
        departmentIds: [],
        departmentId: "",
        departmentProps: {
          label: "name",
          value: "id"
        },
        tabsData: [{
          name: '/api/assignee/performance/staffOne/getRepayMoneyData',
          label: '回收金额',
          //   name: 'commitMoney',
        }, {
          name: '/api/assignee/performance/staffOne/getCommitMoneyData',
          label: '委托金额',
          //   name: 'repayMoney',
        }, {
          name: '/api/assignee/performance/staffOne/getOnRecovery',
          label: '在案回收率',
          //   name: 'repayCount',
        }, {
          name: '/api/assignee/performance/staffOne/getNewRecovery',
          label: '新案回收率',
          //   name: 'rateInCollection',
        }, {
          name: '/api/assignee/performance/staffOne/getOldRecovery',
          label: '旧案回收率',
          //   name: 'rateNew',
        }, {
          name: '/api/assignee/performance/staffOne/getRepayCountData',
          label: '还款案件数',
          //   name: 'rateOld',
        }, {
          name: '/api/assignee/performance/staffOne/getCommitCountData',
          label: '分配案件数',
          //   name: 'rateOld',
        }],
        conditionForm: {
          loanInstitution: '',
          receivableAge: '',
          batchTimes: ''
        },

        xAxisData: [],
        seriesData: [],

        personKPIChart: null,

        // 下拉数据
        dropdownData: {

        },
        loading: true,
        staffId: '',
        staffName: '',
        staffs: [],
        staffObj: {}

      }
    },
    created() {
      // 1、获取部门信息
      // 2、获取列表
      // 3、获取折线图数据
      this.getDepartmentData()
      
    },
    mounted() {
      // 初始化chart对象
      this.personKPIChart = echarts.init(this.$refs.personKPIChart);
    },
    methods: {
      staffIdChange(obj) {
        this.staffId = obj.id
        this.staffName = obj.name
        this.getchartData(this.currentChart)
      },
      chartChange(tab, ev) {
        this.getchartData(tab.name)
      },
      // 填入数据
      drawChart() {
        // this.currentseriesData = this.seriesData[this.currentChart]
        var option = {
          tooltip: {
            trigger: 'axis',
            position: function (pt) {
              return [pt[0], '10%'];
            }
          },
          title: {
            left: 'center',
            text: '',
          },
          legend: {
            data: [this.staffName],
            // show:true,
            // top:0,
          },
          toolbox: {
            // 工具
            // feature: {
            //   dataZoom: {
            //     yAxisIndex: 'none'
            //   },
            //   restore: {},
            //   saveAsImage: {}
            // }
          },
          xAxis: {
            type: 'category',
            boundaryGap: false,
            data: this.xAxisData
          },
          yAxis: {
            type: 'value',
            // boundaryGap: [0, '100%']
          },
          dataZoom: [
            //   {
            //   type: 'inside',
            //   // start: 0,
            //   // end: 10
            //   startValue: 23,
            //   endValue: 35,
            // },
            {
              // start: 0,
              // end: 10,
              // 后台传三年36个月数据，默认显示最近半年6个月。
              startValue: 24,
              endValue: 35,
              handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
              handleSize: '80%',
              handleStyle: {
                color: '#fff',
                shadowBlur: 3,
                shadowColor: 'rgba(0, 0, 0, 0.6)',
                shadowOffsetX: 2,
                shadowOffsetY: 2
              }
            }
          ],
          series: [{
            name: this.staffName,
            type: 'line',
            smooth: true,
            symbol: 'none',
            sampling: 'average',
            itemStyle: {
              normal: {
                // 描边颜色
                color: '#7fb3c9'
              }
            },
            areaStyle: {
              normal: {
                // 渐变颜色
                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                  offset: 0,
                  color: "#d8e8f1"
                }, {
                  offset: 1,
                  color: '#7fb3c9'
                }])
              }
            },
            data: this.seriesData
          }]
        };
        this.personKPIChart.setOption(option);

      },
      getchartData(url) {
        this.$axios
          .post(url, {
            staffId: this.staffId
          })
          .then(res => {
            if (res.data.code == 0) {
              // 清除缓存
              this.xAxisData = []
              this.seriesData = []
              // 倒序
              this.chartData = res.data.data.reverse();
              // 处理数据
              this.chartData.forEach(function (item) {
                this.xAxisData.push(item.date)
                this.seriesData.push(item.value)
              }, this)
              // 图标中填充数据
              this.drawChart()
            } else {
              this.$util.failCallback(res.data, this);
            }
          })
          .catch(err => {
            console.log(err);
          });
      },
      getdropdownData() {
        // 获取下拉数据
        this.$axios.post('', {}).then((res) => {
          if (res.data.code == 0) {
            this.dropdownData = res.data.data;
           
          } else {
            this.$util.failCallback(res.data, this)
          }
        }).catch((err) => {
          console.log(err)
        })
      },
      getDepartmentData() {
        this.$axios
          .post('/api/assignee/performance/staff/getDepartmentData', {})
          .then(res => {
            if (res.data.code == 0) {
              this.departments = res.data.data;
              //   获取列表
              this.getList(res.data.data[0].id)
            } else {
              this.$util.failCallback(res.data, this);
            }
          })
          .catch(err => {
            console.log(err);
          });
      },
      getStaffData(arr) {
        this.departmentId = this.departmentIds[this.departmentIds.length - 1];
        this.$axios
          .post("/api/assignee/performance/staff/getStaffData", {
            departmentId: this.departmentId
          })
          .then(res => {
            if (res.data.code == 0) {
              this.staffs = res.data.data;
            } else {
              this.$util.failCallback(res.data, this);
            }
          })
          .catch(err => {
            console.log(err);
          });
      },
      getList(departmentId) {
        this.loading = true
        this.$axios
          .post("/api/assignee/performance/staff/getPerformanceData", {
            currentPage: 1,
            orgId: departmentId,
            pageSize: 15,
          })
          .then(res => {
            this.loading = false
            if (res.data.code == 0) {
              this.staffId = res.data.data.items[0].staffId;
              this.staffName = res.data.data.items[0].staffName;
              this.getchartData(this.tabsData[0].name)
              this.tb.data = res.data.data.items;

            } else {
              this.$util.failCallback(res.data, this);
            }
          })
          .catch(err => {
            this.loading = false
            console.log(err);
          });
      },



    }
  }

</script>

<style lang="scss">


</style>
