import * as types from '../mutation-types';

import Vue from 'vue';

import axios from 'axios'
import * as util from '../../util/util.js'
// initial state
const state = {
    oldNotes: [],
    newNotes: [],

    hasExpired: false,
    timer: null,
}

// getters
const getters = {
    oldNotes: state => state.oldNotes,
    newNotes: state => state.newNotes,
    oldNotesDialogVisible: state => {
        return state.oldNotes.length > 0 ? true : false
    },
    newNotesDialogVisible: state => {
        return state.newNotes.length > 0 && state.hasExpired ? true : false
    },
    newIds: state => {
        return state.newNotes.map(item => item.id)
    },
    oldIds: state => {
        return state.oldNotes.map(item => item.id)
    },


}

// actions
const actions = {
    // 登录后请求过期备忘
    getOldNotes({
        commit
    }) {
        axios.post('/api/assignee/memo/getRepetitionMemo', {}).then((res) => {
            if (res.data.code == 0 && res.data.data) {
                // this.notes = res.data.data
                commit(types.RECEIVE_OLD_NOTES, {
                    note: res.data.data
                })
            } else {
                util.failCallback(res.data, Vue)

            }
        }).catch((err) => {
            console.log(err)

        })
    },
    removeNotes({
        commit
    }) {
        commit(types.REMOVE_NOTES)
    },
    getNewNotes({
        commit,
        state
    }) {

        // // setInterval(function() {
        // var sock = new SockJS("/api/endpointChat");
        // var stomp = Stomp.over(sock);
        // // var _this = this
        // stomp.connect('guest', 'guest', function(frame) {
        //     stomp.subscribe("/user/queue/notifications", function(res) {
        //         if (res) {
        //             commit(types.RECEIVE_NOTES, { note: [].push(res) })
        //         }
        //     });
        // });
        // // }, 1800000)
        axios.post('/api/assignee/memo/nextInfo', {}).then((res) => {
            if (res.data.code == 0) {
                // this.notes = res.data.data
                if (res.data.data.has == true) {
                    commit(types.RECEIVE_NEW_NOTES, {
                            note: res.data.data.info
                        })
                        // 新建定时任务
                    let timer = setTimeout(function() {
                        // 控制打开dialog
                        commit(types.EXPIRE)
                    }, res.data.data.timeForRemind)
                    commit(types.SET_TIMER, {
                        timer: timer
                    })

                }

            } else {
                util.failCallback(res.data, Vue)

            }
        }).catch((err) => {
            console.log(err)

        })

    },
    newNotesChange({
        commit
    }, notes) {
        commit(types.RECEIVE_NEW_NOTES, {
            note: notes
        })
    },
    timerChange({
        commit,
        state
    }, interval) {
        commit(types.REMOVE_TIMER)
        let timer = setTimeout(function() {
            commit(types.EXPIRE)

        }, interval)
        commit(types.SET_TIMER, {
            timer: timer
        })
    },

}

// mutations
const mutations = {
    // 过期备忘
    [types.RECEIVE_OLD_NOTES](state, {
        note
    }) {
        state.oldNotes = note
    },
    // 最新备忘
    [types.RECEIVE_NEW_NOTES](state, {
        note
    }) {
        state.newNotes = note
    },
    [types.REMOVE_OLD_NOTES](state) {
        state.oldNotes = []
    },
    [types.EXPIRE](state) {
        state.hasExpired = true
    },
    [types.UNEXPIRE](state) {
        state.hasExpired = false
    },
    [types.EXPIRE](state) {
        state.hasExpired = true
    },
    [types.SET_TIMER](state, {
        timer
    }) {
        state.timer = timer
    },
    [types.REMOVE_TIMER](state) {
        clearTimeout(state.timer)
        state.timer = null
    }
}

export default {
    state,
    getters,
    actions,
    mutations
}